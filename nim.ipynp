import numpy as np
import random

################################################################

def playGame():
    sticks, player = 20, 0
    while sticks > 0:
        choice = random.randint(1, min(sticks,3))
        print ("Player ", player, " : ", sticks, " - ", choice, " -> ", sticks-choice)
        sticks -= choice
        player = 1 - player

print ("Random Game")
playGame();
input("Press Enter to continue...")

################################################################

from keras.models import Sequential
from keras.layers import Dense
from keras.models import load_model

model = Sequential()

model.add(Dense(units = 32, input_shape = (1,), activation='sigmoid'))
model.add(Dense(units = 32, activation='sigmoid'))
model.add(Dense(units = 32, activation='sigmoid'))
model.add(Dense(units = 1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['binary_accuracy'])

#model = load_model('nim.h5')

################################################################

def bestChoice(sticks):
    a = [1]   # for 2 and 1
    if sticks >= 4:
        a = model.predict([[sticks-1],[sticks-2],[sticks-3]])
    elif sticks == 3:
        a = model.predict([[2],[1]])
    return np.argmax(a)+1

def winning(sticks):
    a = model.predict(np.array([sticks]))
    return a[0] > 0.5

bestChoice(4)

################################################################

def generatePredictedGame():
    sticks, player = 20, random.randint(0,2)
    data = []
    while sticks > 0:
        data.append ( sticks )
        choice = bestChoice(sticks)
        sticks -= choice
        player = 1 - player
                        
    result = [None] * len(data)
    won_or_lost = 0;   # lost
    for i in reversed(range(len(result))):
        won_or_lost = 1 - won_or_lost
        result[i] = won_or_lost
        
    return np.array(data), np.array(result)
    
print ( generatePredictedGame() )
input("Press Enter to continue...")

################################################################

datasetX, datasetY = generatePredictedGame()

for i in range(200):
    if i%10 == 0:
        datasetX, datasetY = generatePredictedGame()

    for i in range(50):
        game, result = generatePredictedGame()
        datasetX = np.append(datasetX,game,axis=0)
        datasetY = np.append(datasetY,result,axis=0)
    
    model.fit(datasetX, datasetY, epochs = 10, validation_split=0.3 )
    
    for j in range(1,21):
    	print("       ", j, " : ", bestChoice(j), model.predict(np.array([j]))[0])

    print ( generatePredictedGame() )


model.save("nim.h5")



